//ant.importBuild 'tools/build.xml'

apply plugin: 'java'

	sourceCompatibility = 1.6
	targetCompatibility = 1.6

def MAIN_PATH = 'main'
def GEN_PATH = 'output'
def ENTITY_PACKAGE = 'com.wcs.demo.model'

repositories {
    mavenCentral()
    flatDir(dirs: "main/lib")
}

configurations {
    hbmToolLib
}

dependencies {
    // hibernate
    hbmToolLib "org.hibernate:hibernate-tools:3.2.4.GA"
    hbmToolLib "org.hibernate:hibernate-core:3.3.2.GA"
    hbmToolLib "org.hibernate:hibernate-annotations:3.4.0.GA"
    hbmToolLib "org.hibernate:hibernate-commons-annotations:3.1.0.GA"
    hbmToolLib "org.hibernate:ejb3-persistence:1.0.2.GA"
    hbmToolLib "org.hibernate:jtidy:r8-20060801"
    // logger
    hbmToolLib "commons-logging:commons-logging:1.1.1"
    hbmToolLib "log4j:log4j:1.2.14"
    hbmToolLib "org.slf4j:slf4j-api:1.5.11"
    hbmToolLib "org.slf4j:slf4j-log4j12:1.5.11"
    // util
    hbmToolLib "dom4j:dom4j:1.6.1"
    hbmToolLib "cglib:cglib-nodep:2.2.2"
    hbmToolLib "commons-collections:commons-collections:3.2.1"
    hbmToolLib "org.freemarker:freemarker:2.3.16"
    // jdbc driver
    hbmToolLib "db2jcc4:db2jcc4:"
    //hbmToolLib "mysql:mysql-connector-java:5.1.6"
    //hbmToolLib "com.oracle:ojdbc14:10.2.0.3.0"
    //hbmToolLib "net.sourceforge.jtds:jtds:1.2.5"
    //hbmToolLib "com.h2database:h2:1.1.119"
    
    //hbmToolLib "org.hibernate:hibernate-entitymanager:3.5.6-Final"
    //hbmToolLib "org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.0-CR-1"
    
	compile "org.hibernate:hibernate-core:3.3.2.GA"
	compile "org.hibernate:hibernate-annotations:3.4.0.GA"
	compile "org.hibernate:hibernate-entitymanager:3.5.6-Final"
	compile "org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.0-CR-1"
}

sourceSets {
    main {
        java {
            srcDir GEN_PATH+'/entity'
        }
    }
}


//----------------- Hibernate Tools ------------------//
ant.taskdef(name: 'hbmTool', classname: 'org.hibernate.tool.ant.HibernateToolTask', 
    classpath: configurations.hbmToolLib.asPath)

//----------------- hbm2java ------------------//

// 生成实体类
task genEntity << {
    ant.hbmTool{
        jdbcconfiguration(
            configurationfile: MAIN_PATH+'/hbm2java.cfg.xml',
            packagename: ENTITY_PACKAGE,
            namingstrategy:'org.hibernate.cfg.ImprovedNamingStrategy',
            revengfile: MAIN_PATH+'/hibernate.reveng.xml',
            detectmanytomany:'true')
        
        //hbm2hbmxml(destdir: GEN_PATH+"/entity")
        hbm2cfgxml (destdir: GEN_PATH,ejb3:"true")
        hbm2java(destdir: GEN_PATH+"/entity", jdk5:'true', ejb3:"true")
    }
}

// 生成Controller类、Service类
task genBizCode << {
    ant.hbmTool(templatepath:MAIN_PATH+"/template/pojo"){
        classpath {
            fileset(dir: 'build/libs/', includes: 'generator.jar') 
            //fileset(dir: 'build/classes/main', includes: '**/*.class')
        }
        
        annotationconfiguration(configurationfile: GEN_PATH+"/hibernate.cfg.xml")
        hbmtemplate(destdir:GEN_PATH+"/controller", template:"bean.ftl", filepattern:"{package-name}/{class-name}Bean.java")
        hbmtemplate(destdir:GEN_PATH+"/service", template:"service.ftl", filepattern:"{package-name}/{class-name}Bean.java")
    }
}


task prepareGenPage {
    doLast {
        def pageGenList = []
        def p = ~/.*\.java/

        new File( GEN_PATH+'/entity/'+ ENTITY_PACKAGE.replaceAll("\\.","/")).eachFileMatch(p) {f ->
            def entityName = f.name.tokenize(".")[0]
            entityFullName = ENTITY_PACKAGE==''?entityName:ENTITY_PACKAGE+"."+entityName

            pageGenList.add("new PageGenerator().generate("+entityFullName+'.class)')
        }

        def fw2 = new FileWriter(MAIN_PATH+'/genpage.groovy')
        fw2.write(pageGenList.join('\n'))
        fw2.close()
    }
}

// gradle generate.entity build hbmcfg generate.code pages
task pages <<{
//    ant.java(classname: 'tools/GroovyWebGenerator.groovy', fork: true,
//         classpath: "${sourceSets.main.runtimeClasspath.asPath}")
//new GroovyShell().run(file('tools/GroovyWebGenerator.groovy'))

    def roots = ['build/classes/main',"main"] as String[]
    groovy.util.GroovyScriptEngine gse = new groovy.util.GroovyScriptEngine(roots);
    gse.run("genpage.groovy", new groovy.lang.Binding());
}

//----------------- hbm2ddl ------------------//
/**
 * 从实体类生成DDL和数据库
 *
 * 1、配置数据库链接，修改文件 MAIN_PATH/hbm2ddl.cfg.xml
 * 2、将实体类的jar包放入 build/libs 目录
*/
// 生成创建数据库的DDL语句
task genDdl << {
    ant.hbmTool{
        classpath {
            fileset(dir: 'build/libs/', includes: '*.jar') 
            //fileset(dir: 'build/classes/main', includes: '**/*.class')
        }
        
        annotationconfiguration(configurationfile: MAIN_PATH+"/hbm2ddl.cfg.xml",namingstrategy:"org.hibernate.cfg.ImprovedNamingStrategy")
        hbm2ddl(destdir:GEN_PATH,outputfilename:"schema.sql",delimiter:";",export:"false",update:"false",drop:"true",create:"true",format:"false",haltonerror:"false")
    }
}

// 生成创建数据库
task genDb << {
    ant.hbmTool(destdir:GEN_PATH){
        classpath {
            fileset(dir: 'build/libs/', includes: '*.jar') 
            //fileset(dir: 'build/classes/main', includes: '**/*.class')
        }
        
        annotationconfiguration(configurationfile: MAIN_PATH+"/hbm2ddl.cfg.xml",namingstrategy:"org.hibernate.cfg.ImprovedNamingStrategy")
        hbm2ddl(export:"true",drop:"true",create:"true",haltonerror:"false")
    }
}
