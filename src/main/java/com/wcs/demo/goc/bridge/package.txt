桥接模式而不以其他开始是因为一个理由。我认为桥接模式是所有面向对象模式的基础。理由如下：

它教导如何思考抽象，这是面向对象设计模式的关键概念。

它实现了基本的OOD原则。

它容易理解。

如果正确理解该模式，学习其他模式会很容易。

我们房间里有些电器（电灯，风扇等）。这些设备按照某些方式布局，并由开关控制。
任何时候你都能替换或排查一个电器而不用碰到其他东西。
例如，你可以换一个电灯而不需要换开关。同样，你可以换一个开关或排查它而不需要碰到或替换相应的电灯或风扇；
甚至你可以用把电灯连接到风扇的开关上，把风扇连到电灯的开关上，而不需要碰到开关。

风扇和电灯的两种不同开关，一个普通点，另一个别致点

当不同东西联系在一起时，它们应该按照一定方式联系：
修改或替换一个系统时不会影响到另一个，或者说即便有，也应该最小化。
这能够让你的系统易于管理，且成本低。想想一下，如果改一下房间里的灯同时需要改开关，
你会乐意在你房子上花钱并安装这个系统吗？

把电灯/风扇和开关联系到一起的是电线和电器布局。我们可以它们看做不同系统间相互联系的桥梁。
其基本的思想是，一个事物不能和另一外一个事物直接联系。
当然啦，它们应当通过某些桥梁或接口联系在一起。用软件术语来说，这叫“松耦合”。


桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。
桥接的用意是：将抽象化与实现化解耦，使得二者可以独立变化，
像我们常用的JDBC桥DriverManager一样，JDBC进行连接数据库的时候，
在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝毫不用动，
原因就是JDBC提供统一接口，每个数据库提供各自的实现，
用一个叫做数据库驱动的程序来桥接就行了。

上榜理由：把实现和逻辑分开，对于我们深刻理解面向对象的聚合复用的思想甚有助益。

抽象化

存在于多个实体中的共同的概念性联系，就是抽象化。
作为一个过程，抽象化就是忽略一些信息，从而把不同的实体当做同样的实体对待【LISKOV94】。

实现化

抽象化给出的具体实现，就是实现化。

脱耦

所谓耦合，就是两个实体的行为的某种强关联。而将它们的强关联去掉，就是耦合的解脱，或称脱耦。
在这里，脱耦是指将抽象化和实现化之间的耦合解脱开，或者说是将它们之间的强关联改换成弱关联。
将两个角色之间的继承关系改为聚合关系，就是将它们之间的强关联改换成为弱关联。

因此，桥梁模式中的所谓脱耦，就是指在一个软件系统的抽象化和实现化之间使用组合/聚合关系而不是继承关系，
从而使两者可以相对独立地变化。这就是桥梁模式的用意。